/**
 * ÌÜµÌï© Ìà¥ÌåÅ Í¥ÄÎ¶¨ Î™®Îìà (Ïã±Í∏ÄÌÜ§)
 * ÌååÏùº ÏúÑÏπò: src/core/TooltipManager.js
 *
 * Î∂ÑÏÇ∞Îêú Ìà¥ÌåÅ Î°úÏßÅ ÌÜµÌï©
 * Îã§ÏñëÌïú Ìà¥ÌåÅ ÌÉÄÏûÖ ÏßÄÏõê (Ïû•ÎπÑ, ÎßÅÌÅ¨, Íµ≠ÏÇ¨, Í≤ΩÎ≥¥ Îì±)
 * ÏúÑÏπò Í≥ÑÏÇ∞ Î∞è ÌëúÏãú Î°úÏßÅ ÌÜµÌï©
 * Ïï†ÎãàÎ©îÏù¥ÏÖò Î∞è Ïä§ÌÉÄÏùºÎßÅ ÌÜµÌï©
 */

import { formatDateTimeForToolTip, escapeHtml } from '../utils/CommonUtils.js';
import { colorManager as ColorManager } from '../utils/ColorManager.js'; // Ïã±Í∏ÄÌÜ§
import { stateManager as StateManager } from '../core/StateManager.js'; // StateManager Ï∂îÍ∞Ä

// ================================
// 1. Ìà¥ÌåÅ ÌÉÄÏûÖ Î∞è ÏÉÅÏàò Ï†ïÏùò
// ================================

const TOOLTIP_TYPES = {
  EQUIPMENT: 'equipment',
  LINK: 'link',
  GUKSA: 'guksa',
  ALARM: 'alarm',
  MAP_NODE: 'map-node',
  CUSTOM: 'custom',
};

// ÏàòÏ†ï ÌõÑ (Ïä§ÌÉÄÏùº Í¥ÄÎ†® ÏÉÅÏàòÎäî Ïú†ÏßÄÌïòÎêò map_tooltip.css ÏóêÏÑú Í¥ÄÎ¶¨)
const TOOLTIP_CONFIG = {
  SHOW_DURATION: 100, // JavaScript Ïï†ÎãàÎ©îÏù¥ÏÖòÏö©
  HIDE_DURATION: 200, // JavaScript Ïï†ÎãàÎ©îÏù¥ÏÖòÏö©
  AUTO_HIDE_DELAY: 0, // ÏûêÎèô Ïà®ÍπÄ ÎπÑÌôúÏÑ±Ìôî (ÏõêÎûò 8000)
  MAX_WIDTH: 380, // ÏúÑÏπò Í≥ÑÏÇ∞Ïö©
  MAX_HEIGHT: 280, // ÏúÑÏπò Í≥ÑÏÇ∞Ïö©
  OFFSET_X: 15, // ÏúÑÏπò Í≥ÑÏÇ∞Ïö©
  OFFSET_Y: -10, // ÏúÑÏπò Í≥ÑÏÇ∞Ïö©
  Z_INDEX: 9999, // CSSÏôÄ ÎèôÍ∏∞Ìôî ÌïÑÏöîÏãúÏóêÎßå ÏÇ¨Ïö©

  MAX_ALARMS_DISPLAY: 30, // Í≤ΩÎ≥¥ ÏµúÎåÄ ÌëúÏãú Í∞úÏàò
  MAX_ALARM_TEXT_LEN: 50, // Í≤ΩÎ≥¥ Í∏∏Ïù¥
};

const TOOLTIP_POSITIONS = {
  AUTO: 'auto',
  TOP: 'top',
  BOTTOM: 'bottom',
  LEFT: 'left',
  RIGHT: 'right',
  TOP_LEFT: 'top-left',
  TOP_RIGHT: 'top-right',
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_RIGHT: 'bottom-right',
};

// ================================
// 2. TooltipManager ÌÅ¥ÎûòÏä§
// ================================

class TooltipManager {
  constructor() {
    this.tooltips = new Map();
    this.activeTooltip = null;
    this.autoHideTimer = null;
    this.isInitialized = false;
    this.showTimer = null; // Ï¶âÏãú ÌëúÏãúÎ•º ÏúÑÌïú ÌÉÄÏù¥Î®∏

    this.init();
    console.log('üí¨ TooltipManager Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
  }

  /**
   * Ï¥àÍ∏∞Ìôî
   */
  init() {
    this.createTooltipContainer();
    this.setupGlobalEvents();
    this.isInitialized = true;
  }

  // ================================
  // 3. Ìà¥ÌåÅ ÏÉùÏÑ± Î∞è Í¥ÄÎ¶¨
  // ================================

  /**
   * Ìà¥ÌåÅ Ïª®ÌÖåÏù¥ÎÑà ÏÉùÏÑ±
   */
  createTooltipContainer() {
    if (this.tooltipContainer) {
      return this.tooltipContainer;
    }

    this.tooltipContainer = document.createElement('div');
    this.tooltipContainer.className = 'tooltip-manager-container';

    // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏöîÏÜåÏôÄÏùò ÏÉÅÌò∏ÏûëÏö© Î¨∏Ï†ú Î∞©ÏßÄÎ•º ÏúÑÌïú Ïä§ÌÉÄÏùº ÏÑ§Ï†ï
    this.tooltipContainer.style.cssText = `
      position: absolute;
      z-index: ${TOOLTIP_CONFIG.Z_INDEX};
      pointer-events: none;
      opacity: 0;
      transform: scale(0.9);
      transition: opacity ${TOOLTIP_CONFIG.SHOW_DURATION}ms ease-out, transform ${TOOLTIP_CONFIG.SHOW_DURATION}ms ease-out;
      max-width: ${TOOLTIP_CONFIG.MAX_WIDTH}px;
      max-height: ${TOOLTIP_CONFIG.MAX_HEIGHT}px;
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
      will-change: opacity, transform;
    `;

    document.body.appendChild(this.tooltipContainer);
    return this.tooltipContainer;
  }

  /**
   * Ìà¥ÌåÅ ÌëúÏãú (Ï¶âÏãú ÌëúÏãú Í∞úÏÑ†)
   */
  show(type, data, event, options = {}) {
    const {
      position = TOOLTIP_POSITIONS.AUTO,
      customTemplate = null,
      autoHide = true,
      className = '',
      immediate = true, // Ï¶âÏãú ÌëúÏãú ÏòµÏÖò Ï∂îÍ∞Ä
    } = options;

    // Í∏∞Ï°¥ ÌÉÄÏù¥Î®∏ Ï†ïÎ¶¨
    if (this.showTimer) {
      clearTimeout(this.showTimer);
      this.showTimer = null;
    }

    // Í∏∞Ï°¥ Ìà¥ÌåÅ Ïà®Í∏∞Í∏∞
    this.hideAll();

    const showTooltip = () => {
      // Ìà¥ÌåÅ ÎÇ¥Ïö© ÏÉùÏÑ±
      const content = customTemplate || this.generateContent(type, data);
      if (!content) {
        console.warn('Ìà¥ÌåÅ ÎÇ¥Ïö©ÏùÑ ÏÉùÏÑ±Ìï† Ïàò ÏóÜÏäµÎãàÎã§:', type, data);
        return null;
      }

      // Ìà¥ÌåÅ ÏöîÏÜå ÏÑ§Ï†ï
      this.tooltipContainer.innerHTML = content;
      this.tooltipContainer.className = `tooltip-manager-container ${className}`;

      // ÏúÑÏπò Í≥ÑÏÇ∞ Î∞è ÏÑ§Ï†ï
      this.setPosition(event, position);

      // Ìà¥ÌåÅ ÌëúÏãú (Ï¶âÏãú)
      requestAnimationFrame(() => {
        this.tooltipContainer.classList.add('showing');
      });

      // ÌôúÏÑ± Ìà¥ÌåÅ ÏÑ§Ï†ï
      this.activeTooltip = {
        type,
        data,
        element: this.tooltipContainer,
        timestamp: new Date(),
      };

      // ÏûêÎèô Ïà®ÍπÄ ÏÑ§Ï†ï
      if (autoHide && TOOLTIP_CONFIG.AUTO_HIDE_DELAY > 0) {
        this.autoHideTimer = setTimeout(() => {
          this.hide();
        }, TOOLTIP_CONFIG.AUTO_HIDE_DELAY);
      }

      return this.activeTooltip;
    };

    // Ï¶âÏãú ÌëúÏãú ÎòêÎäî ÏïΩÍ∞ÑÏùò ÏßÄÏó∞ ÌõÑ ÌëúÏãú
    if (immediate) {
      return showTooltip();
    } else {
      this.showTimer = setTimeout(showTooltip, 100);
      return null;
    }
  }

  /**
   * Ìà¥ÌåÅ Ïà®Í∏∞Í∏∞
   */
  hide() {
    if (this.showTimer) {
      clearTimeout(this.showTimer);
      this.showTimer = null;
    }

    if (this.tooltipContainer) {
      this.tooltipContainer.classList.remove('showing');
      this.tooltipContainer.classList.add('hiding');

      // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏôÑÎ£å ÌõÑ Ïã§Ï†ú Ïà®ÍπÄ
      setTimeout(() => {
        if (this.tooltipContainer) {
          this.tooltipContainer.style.opacity = '0';
          this.tooltipContainer.classList.remove('hiding');
        }
      }, TOOLTIP_CONFIG.HIDE_DURATION);
    }

    if (this.autoHideTimer) {
      clearTimeout(this.autoHideTimer);
      this.autoHideTimer = null;
    }

    this.activeTooltip = null;
  }

  /**
   * Î™®Îì† Ìà¥ÌåÅ Ïà®Í∏∞Í∏∞
   */
  hideAll() {
    this.hide();

    // Í∏∞Ï°¥ ÏãúÏä§ÌÖúÏùò Ìà¥ÌåÅÎì§ÎèÑ Ïà®Í∏∞Í∏∞ (ÌïòÏúÑ Ìò∏ÌôòÏÑ±)
    //     const legacyTooltips = document.querySelectorAll('.map-tooltip, .equip-map-tooltip');
    //     legacyTooltips.forEach((tooltip) => {
    //       tooltip.style.opacity = '0';
    //       tooltip.style.display = 'none';
    //     });
  }

  // ================================
  // 4. ÏúÑÏπò Í≥ÑÏÇ∞ Î∞è ÏÑ§Ï†ï
  // ================================

  /**
   * Ìà¥ÌåÅ ÏúÑÏπò ÏÑ§Ï†ï
   */
  setPosition(event, position = TOOLTIP_POSITIONS.AUTO) {
    if (!this.tooltipContainer || !event) return;

    const mouseX = event.pageX || event.clientX + window.scrollX;
    const mouseY = event.pageY || event.clientY + window.scrollY;

    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    const scrollX = window.scrollX;
    const scrollY = window.scrollY;

    // Ìà¥ÌåÅ ÌÅ¨Í∏∞ Ï∏°Ï†ï
    this.tooltipContainer.style.visibility = 'hidden';
    this.tooltipContainer.style.opacity = '1';
    this.tooltipContainer.style.transform = 'scale(1)';

    const rect = this.tooltipContainer.getBoundingClientRect();

    this.tooltipContainer.style.visibility = 'visible';
    this.tooltipContainer.style.opacity = '0';
    this.tooltipContainer.style.transform = 'scale(0.9)';

    const tooltipWidth = Math.min(rect.width, TOOLTIP_CONFIG.MAX_WIDTH);
    const tooltipHeight = Math.min(rect.height, TOOLTIP_CONFIG.MAX_HEIGHT);

    let finalX, finalY;

    if (position === TOOLTIP_POSITIONS.AUTO) {
      // Í∞úÏÑ†Îêú ÏûêÎèô ÏúÑÏπò Í≥ÑÏÇ∞
      const spaceRight = viewportWidth - (mouseX - scrollX);
      const spaceLeft = mouseX - scrollX;
      const spaceBelow = viewportHeight - (mouseY - scrollY);
      const spaceAbove = mouseY - scrollY;

      // X ÏúÑÏπò Í≤∞Ï†ï
      if (spaceRight >= tooltipWidth + TOOLTIP_CONFIG.OFFSET_X + 20) {
        finalX = mouseX + TOOLTIP_CONFIG.OFFSET_X;
      } else if (spaceLeft >= tooltipWidth + Math.abs(TOOLTIP_CONFIG.OFFSET_X) + 20) {
        finalX = mouseX - tooltipWidth - Math.abs(TOOLTIP_CONFIG.OFFSET_X);
      } else {
        finalX = Math.max(
          scrollX + 10,
          Math.min(mouseX, scrollX + viewportWidth - tooltipWidth - 10)
        );
      }

      // Y ÏúÑÏπò Í≤∞Ï†ï
      if (spaceBelow >= tooltipHeight + Math.abs(TOOLTIP_CONFIG.OFFSET_Y) + 20) {
        finalY = mouseY + Math.abs(TOOLTIP_CONFIG.OFFSET_Y);
      } else if (spaceAbove >= tooltipHeight + Math.abs(TOOLTIP_CONFIG.OFFSET_Y) + 20) {
        finalY = mouseY - tooltipHeight - Math.abs(TOOLTIP_CONFIG.OFFSET_Y);
      } else {
        finalY = Math.max(
          scrollY + 10,
          Math.min(mouseY, scrollY + viewportHeight - tooltipHeight - 10)
        );
      }
    } else {
      // ÏàòÎèô ÏúÑÏπò ÏÑ§Ï†ï
      const positions = this.calculateManualPosition(
        mouseX,
        mouseY,
        tooltipWidth,
        tooltipHeight,
        position
      );
      finalX = positions.x;
      finalY = positions.y;
    }

    // ÌôîÎ©¥ Í≤ΩÍ≥Ñ ÌôïÏù∏ Î∞è Ï°∞Ï†ï
    finalX = Math.max(scrollX + 5, Math.min(finalX, scrollX + viewportWidth - tooltipWidth - 5));
    finalY = Math.max(scrollY + 5, Math.min(finalY, scrollY + viewportHeight - tooltipHeight - 5));

    // ÏúÑÏπò Ï†ÅÏö©
    this.tooltipContainer.style.left = finalX + 'px';
    this.tooltipContainer.style.top = finalY + 'px';
  }

  /**
   * ÏàòÎèô ÏúÑÏπò Í≥ÑÏÇ∞
   */
  calculateManualPosition(mouseX, mouseY, tooltipWidth, tooltipHeight, position) {
    const offset = 15;

    switch (position) {
      case TOOLTIP_POSITIONS.TOP:
        return { x: mouseX - tooltipWidth / 2, y: mouseY - tooltipHeight - offset };
      case TOOLTIP_POSITIONS.BOTTOM:
        return { x: mouseX - tooltipWidth / 2, y: mouseY + offset };
      case TOOLTIP_POSITIONS.LEFT:
        return { x: mouseX - tooltipWidth - offset, y: mouseY - tooltipHeight / 2 };
      case TOOLTIP_POSITIONS.RIGHT:
        return { x: mouseX + offset, y: mouseY - tooltipHeight / 2 };
      case TOOLTIP_POSITIONS.TOP_LEFT:
        return { x: mouseX - tooltipWidth - offset, y: mouseY - tooltipHeight - offset };
      case TOOLTIP_POSITIONS.TOP_RIGHT:
        return { x: mouseX + offset, y: mouseY - tooltipHeight - offset };
      case TOOLTIP_POSITIONS.BOTTOM_LEFT:
        return { x: mouseX - tooltipWidth - offset, y: mouseY + offset };
      case TOOLTIP_POSITIONS.BOTTOM_RIGHT:
        return { x: mouseX + offset, y: mouseY + offset };
      default:
        return { x: mouseX + TOOLTIP_CONFIG.OFFSET_X, y: mouseY + TOOLTIP_CONFIG.OFFSET_Y };
    }
  }

  // ================================
  // 5. ÏΩòÌÖêÏ∏† ÏÉùÏÑ± Î©îÏÑúÎìúÎì§
  // ================================

  /**
   * Ìà¥ÌåÅ ÎÇ¥Ïö© ÏÉùÏÑ± (ÌÉÄÏûÖÎ≥Ñ Î∂ÑÍ∏∞)
   */
  generateContent(type, data) {
    switch (type) {
      case TOOLTIP_TYPES.EQUIPMENT:
        return this.generateEquipmentTooltip(data);
      case TOOLTIP_TYPES.LINK:
        return this.generateLinkTooltip(data);
      case TOOLTIP_TYPES.GUKSA:
        return this.generateGuksaTooltip(data);
      case TOOLTIP_TYPES.ALARM:
        return this.generateAlarmTooltip(data);
      case TOOLTIP_TYPES.MAP_NODE:
        return this.generateMapNodeTooltip(data);
      default:
        return this.generateCustomTooltip(data);
    }
  }

  /**
   * Ïû•ÎπÑ Ìà¥ÌåÅ ÏÉùÏÑ±
   */
  generateEquipmentTooltip(data) {
    const {
      equip_id = '',
      equip_name = '',
      equip_type = '',
      equip_field = '',
      guksa_name = '',
    } = data;

    // üî¥ StateManagerÏóêÏÑú Ìï¥Îãπ Ïû•ÎπÑÏùò Í≤ΩÎ≥¥ Ï°∞Ìöå (Îã®Ïùº Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§)
    const totalAlarmData = StateManager.get('totalAlarmDataList', []);
    const finalAlarms = totalAlarmData.filter((alarm) => alarm && alarm.equip_id === equip_id);
    const finalAlarmCount = finalAlarms.length;

    // üî¥ Ïú†Ìö®/Î¨¥Ìö® Í≤ΩÎ≥¥ Î∂ÑÏÑùÌïòÏó¨ ÏÉâÏÉÅ Í≤∞Ï†ï
    let alarmCountColor = '#7f8c8d'; // Í∏∞Î≥∏ ÌöåÏÉâ (0Í±¥)

    if (finalAlarmCount > 0) {
      const validAlarms = finalAlarms.filter((alarm) => alarm.valid_yn === 'Y').length;
      const invalidAlarms = finalAlarmCount - validAlarms;

      if (validAlarms > 0 && invalidAlarms === 0) {
        alarmCountColor = '#e74c3c'; // Î™®Îëê Ïú†Ìö® - Îπ®Í∞ÑÏÉâ
      } else if (validAlarms === 0 && invalidAlarms > 0) {
        alarmCountColor = '#95a5a6'; // Î™®Îëê Î¨¥Ìö® - ÌöåÏÉâ
      } else if (validAlarms > 0 && invalidAlarms > 0) {
        alarmCountColor = '#f39c12'; // Ïú†Ìö®+Î¨¥Ìö® ÌòºÌï© - Ï£ºÌô©ÏÉâ
      }
    }

    const fieldColor = this.getFieldColor(equip_field);

    // üî¥ Í≤ΩÎ≥¥ ÎÇ¥Ïó≠ HTML ÏÉùÏÑ±
    const alarmHtml = this.generateAlarmListHtml(equip_id, finalAlarms);

    return `
      <div class="tooltip-content equipment-tooltip">
        <div class="tooltip-header">
          <div class="tooltip-title">‚öôÔ∏è ${escapeHtml(equip_name)}</div>
          <div class="tooltip-field-badge" style="background-color: ${fieldColor}; color: white;">
            ${escapeHtml(equip_field)}
          </div>
        </div>
        <div class="tooltip-body">
          <div class="tooltip-info-row">
            <span class="tooltip-label">‚Ä¢ Ïú†Ìòï:</span>
            <span class="tooltip-value">${escapeHtml(equip_type)}</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">‚Ä¢ Íµ≠ÏÇ¨:</span>
            <span class="tooltip-value">${escapeHtml(guksa_name)}</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">‚Ä¢ Ïû•ÎπÑ ID:</span>
            <span class="tooltip-value">${escapeHtml(equip_id)}</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">‚Ä¢ Í≤ΩÎ≥¥:</span>
            <span class="tooltip-value" style="color: ${alarmCountColor}; font-weight: 500;">${finalAlarmCount}Í±¥</span>
          </div>
          ${alarmHtml}
        </div>
      </div>
    `;
  }

  /**
   * ÎßÅÌÅ¨ Ìà¥ÌåÅ ÏÉùÏÑ± (TblSubLink Ï†ïÎ≥¥ Ìè¨Ìï®)
   */
  generateLinkTooltip(data) {
    const {
      link_name = '',
      link_field = 'ÏÑ†Î°ú', // TblSubLink Í∏∞Î∞ò Î∂ÑÏïº Ï†ïÎ≥¥
      link_type = 'Í¥ëÏºÄÏù¥Î∏î', // TblSubLink Í∏∞Î∞ò Ïú†Ìòï Ï†ïÎ≥¥
      section = '', // Íµ¨Í∞Ñ Ï†ïÎ≥¥ (ÏÉÅÏúÑ ÌïòÏúÑ ÎÖ∏Îìú Ïù¥Î¶Ñ)
      cable_aroot = '', // ÏºÄÎ¶¨Ïñ¥ AÎ£®Ìä∏
      cable_broot = '', // ÏºÄÎ¶¨Ïñ¥ BÎ£®Ìä∏
      sourceId = '',
      targetId = '',
      sourceField = '',
      targetField = '',
      sourceNode = null,
      targetNode = null,
      alarms = [],
      // Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú ÌïÑÎìúÎì§
      linkId = '',
    } = data;

    // MW-MW Íµ¨Í∞Ñ ÌåêÎ≥Ñ
    const isMWLink = link_field === 'MW' || (sourceField === 'MW' && targetField === 'MW');
    const displayField = link_field || (isMWLink ? 'MW' : 'ÏÑ†Î°ú');
    const displayType = link_type || (isMWLink ? 'MW' : 'Í¥ëÏºÄÏù¥Î∏î');

    let sourceInfo = sourceId;
    let targetInfo = targetId;

    if (sourceNode) {
      sourceInfo = `${sourceNode.equip_name || sourceNode.name || sourceId}`;
      if (sourceNode.guksa_name) {
        sourceInfo += ` (${sourceNode.guksa_name})`;
      }
    }

    if (targetNode) {
      targetInfo = `${targetNode.equip_name || targetNode.name || targetId}`;
      if (targetNode.guksa_name) {
        targetInfo += ` (${targetNode.guksa_name})`;
      }
    }

    const fieldColor = this.getFieldColor(displayField);

    // ÎßÅÌÅ¨ ÏûêÏ≤¥Ïùò Í≤ΩÎ≥¥ Ï†ïÎ≥¥ Ï°∞Ìöå (StateManager ÏÇ¨Ïö©)
    const totalAlarmData = StateManager.get('totalAlarmDataList', []);
    const linkAlarms = totalAlarmData.filter((alarm) => {
      if (!alarm) return false;

      // Ï†ïÌôï Îß§Ïπ≠Îßå ÏàòÌñâ - StateManagerÏôÄ ÎèôÏùºÌïú Î°úÏßÅ
      if (alarm.equip_id === link_name) {
        return true;
      }

      return false;
    });

    // üî¥ ÎßÅÌÅ¨ Í≤ΩÎ≥¥ Ïú†Ìö®/Î¨¥Ìö® Î∂ÑÏÑùÌïòÏó¨ ÏÉâÏÉÅ Í≤∞Ï†ï
    let linkAlarmCountColor = '#7f8c8d'; // Í∏∞Î≥∏ ÌöåÏÉâ (0Í±¥)

    if (linkAlarms.length > 0) {
      const validAlarms = linkAlarms.filter((alarm) => alarm.valid_yn === 'Y').length;
      const invalidAlarms = linkAlarms.length - validAlarms;

      if (validAlarms > 0 && invalidAlarms === 0) {
        linkAlarmCountColor = '#e74c3c'; // Î™®Îëê Ïú†Ìö® - Îπ®Í∞ÑÏÉâ
      } else if (validAlarms === 0 && invalidAlarms > 0) {
        linkAlarmCountColor = '#95a5a6'; // Î™®Îëê Î¨¥Ìö® - ÌöåÏÉâ
      } else if (validAlarms > 0 && invalidAlarms > 0) {
        linkAlarmCountColor = '#f39c12'; // Ïú†Ìö®+Î¨¥Ìö® ÌòºÌï© - Ï£ºÌô©ÏÉâ
      }
    }

    // üî¥ ÎßÅÌÅ¨ Í≤ΩÎ≥¥ ÎÇ¥Ïó≠ HTML ÏÉùÏÑ± (0Í±¥ÎèÑ Ìè¨Ìï®)
    const alarmHtml = this.generateAlarmListHtml(link_name, linkAlarms);

    return `
      <div class="tooltip-content link-tooltip">
        <div class="tooltip-header">
          <div class="tooltip-title">üîó ${escapeHtml(link_name || 'ÎßÅÌÅ¨')}</div>
          <div class="tooltip-type-badge" style="background: ${fieldColor}20; color: ${fieldColor}; border: 1px solid ${fieldColor}40;">
            ${displayField} - ${displayType}
          </div>
        </div>
        <div class="tooltip-body">
          ${
            section
              ? `
          <div class="tooltip-info-row">
            <span class="tooltip-label">Íµ¨Í∞Ñ:</span>
            <span class="tooltip-value" style="font-weight: 500;">${escapeHtml(section)}</span>
          </div>`
              : `
          <div class="tooltip-info-row">
            <span class="tooltip-label">ÏãúÏûë:</span>
            <span class="tooltip-value">${escapeHtml(sourceInfo)}</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Ï¢ÖÎ£å:</span>
            <span class="tooltip-value">${escapeHtml(targetInfo)}</span>
          </div>`
          }
          <div class="tooltip-info-row">
            <span class="tooltip-label">Î∂ÑÏïº:</span>
            <span class="tooltip-value" style="color: ${fieldColor}; font-weight: 500;">
              ${displayField}
            </span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Ïú†Ìòï:</span>
            <span class="tooltip-value" style="font-weight: 500;">${displayType}</span>
          </div>
          
          ${
            cable_aroot
              ? `
          <div class="tooltip-info-row">
            <span class="tooltip-label">AÎ£®Ìä∏:</span>
            <span class="tooltip-value" style="font-size: 12px;">${escapeHtml(cable_aroot)}</span>
          </div>`
              : ''
          }
          ${
            cable_broot
              ? `
          <div class="tooltip-info-row">
            <span class="tooltip-label">BÎ£®Ìä∏:</span>
            <span class="tooltip-value" style="font-size: 12px;">${escapeHtml(cable_broot)}</span>
          </div>`
              : ''
          }
          ${
            linkId
              ? `
          <div class="tooltip-info-row">
            <span class="tooltip-label">ÎßÅÌÅ¨ ID:</span>
            <span class="tooltip-value">${escapeHtml(linkId)}</span>
          </div>`
              : ''
          }
          <div class="tooltip-info-row">
            <span class="tooltip-label">Í≤ΩÎ≥¥:</span>
            <span class="tooltip-value" style="color: ${linkAlarmCountColor}; font-weight: 500;">${
      linkAlarms.length
    }Í±¥</span>
          </div>
          ${alarmHtml}
        </div>
      </div>
    `;
  }

  /**
   * Íµ≠ÏÇ¨ Ìà¥ÌåÅ ÏÉùÏÑ±
   */
  generateGuksaTooltip(data) {
    const {
      guksa_id = '',
      guksa_name = '',
      equipmentCount = 0,
      alarmCount = 0,
      sectors = [],
    } = data;

    const sectorInfo =
      sectors.length > 0
        ? sectors
            .map(
              (s) => `<span style="color: ${this.getFieldColor(s)}; font-weight: 500;">${s}</span>`
            )
            .join(', ')
        : 'Ï†ïÎ≥¥ ÏóÜÏùå';

    return `
      <div class="tooltip-content guksa-tooltip">
        <div class="tooltip-header">
          <div class="tooltip-title">üè¢ ${escapeHtml(guksa_name)}</div>
        </div>
        <div class="tooltip-body">
          <div class="tooltip-info-row">
            <span class="tooltip-label">Íµ≠ÏÇ¨ ID:</span>
            <span class="tooltip-value">${escapeHtml(guksa_id)}</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Ïû•ÎπÑ Ïàò:</span>
            <span class="tooltip-value">${equipmentCount}ÎåÄ</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Í≤ΩÎ≥¥ Ïàò:</span>
            <span class="tooltip-value" style="color: ${
              alarmCount > 0 ? '#e74c3c' : '#27ae60'
            }; font-weight: 500;">${alarmCount}Í∞ú</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Î∂ÑÏïº:</span>
            <span class="tooltip-value">${sectorInfo}</span>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Í≤ΩÎ≥¥ Ìà¥ÌåÅ ÏÉùÏÑ± (Í∞úÏÑ†Îêú ÎîîÏûêÏù∏)
   */
  generateAlarmTooltip(data) {
    const {
      alarm_message = '',
      occur_datetime = '',
      valid_yn = '',
      equip_name = '',
      equip_id = '',
      sector = '',
    } = data;

    const validityClass = valid_yn === 'Y' ? 'valid-alarm' : 'invalid-alarm';
    const validityText = valid_yn === 'Y' ? 'Ïú†Ìö®' : 'Î¨¥Ìö®';
    const fieldColor = this.getFieldColor(sector);

    return `
      <div class="tooltip-content alarm-tooltip ${validityClass}">
        <div class="tooltip-header">
          <div class="tooltip-title">‚ö†Ô∏è Í≤ΩÎ≥¥ Ï†ïÎ≥¥</div>
          <div class="tooltip-validity ${validityClass}">${validityText}</div>
        </div>
        <div class="tooltip-body">
          <div class="tooltip-info-row">
            <span class="tooltip-label">Î©îÏãúÏßÄ:</span>
            <span class="tooltip-value">${escapeHtml(alarm_message)}</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Î∞úÏÉùÏãúÍ∞Ñ:</span>
            <span class="tooltip-value">${formatDateTimeForToolTip(occur_datetime)}</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Ïû•ÎπÑ:</span>
            <span class="tooltip-value">${escapeHtml(equip_name)} (${escapeHtml(equip_id)})</span>
          </div>
          <div class="tooltip-info-row">
            <span class="tooltip-label">Î∂ÑÏïº:</span>
            <span class="tooltip-value" style="color: ${fieldColor}; font-weight: 500;">${sector}</span>
          </div>
        </div>
      </div>
    `;
  }

  /**
   * Îßµ ÎÖ∏Îìú Ìà¥ÌåÅ ÏÉùÏÑ± (Í∏∞Ï°¥ ÏãúÏä§ÌÖú Ìò∏Ìôò)
   */
  generateMapNodeTooltip(data) {
    if (data.type === 'guksa') {
      return this.generateGuksaTooltip(data);
    } else {
      return this.generateEquipmentTooltip(data);
    }
  }

  /**
   * Ïª§Ïä§ÌÖÄ Ìà¥ÌåÅ ÏÉùÏÑ±
   */
  generateCustomTooltip(data) {
    const { title = '', content = '', html = '' } = data;

    if (html) {
      return html;
    }

    return `
      <div class="tooltip-content custom-tooltip">
        ${
          title
            ? `
        <div class="tooltip-header">
          <div class="tooltip-title">${escapeHtml(title)}</div>
        </div>`
            : ''
        }
        <div class="tooltip-body">
          ${escapeHtml(content)}
        </div>
      </div>
    `;
  }

  // ================================
  // 6. Ïú†Ìã∏Î¶¨Ìã∞ Î©îÏÑúÎìúÎì§
  // ================================

  /**
   * Î∂ÑÏïº ÏÉâÏÉÅ Í∞ÄÏ†∏Ïò§Í∏∞
   */
  getFieldColor(field) {
    if (typeof ColorManager !== 'undefined' && ColorManager.getEquipmentNodeColor) {
      return ColorManager.getEquipmentNodeColor(field);
    }

    // ÎåÄÏ≤¥ ÏÉâÏÉÅ Îß§Ìïë
    const colors = {
      MW: ColorManager.getFieldColor('MW'),
      ÏÑ†Î°ú: ColorManager.getFieldColor('ÏÑ†Î°ú'),
      Ï†ÑÏÜ°: ColorManager.getFieldColor('Ï†ÑÏÜ°'),
      IP: ColorManager.getFieldColor('IP'),
      Î¨¥ÏÑ†: ColorManager.getFieldColor('Î¨¥ÏÑ†'),
      ÍµêÌôò: ColorManager.getFieldColor('ÍµêÌôò'),
    };
    return colors[field] || '#95a5a6';
  }

  /**
   * Í≤ΩÎ≥¥ Î™©Î°ù HTML ÏÉùÏÑ±
   */
  generateAlarmListHtml(equipId, alarms = []) {
    if (!alarms || alarms.length === 0) {
      return `
        <div class="tooltip-alarm-section">
          <div class="tooltip-section-title">üìã ÏµúÍ∑º Í≤ΩÎ≥¥ ÎÇ¥Ïó≠</div>
          <div class="tooltip-no-alarms">Í≤ΩÎ≥¥ ÎÇ¥Ïó≠Ïù¥ ÏóÜÏäµÎãàÎã§.</div>
        </div>
      `;
    }

    // ÏµúÎåÄ ÌëúÏãú Í∞úÏàòÎ°ú Ï†úÌïú
    const alarmList = alarms.slice(0, TOOLTIP_CONFIG.MAX_ALARMS_DISPLAY);

    let alarmHtml = `
      <div class="tooltip-alarm-section">
        <div class="tooltip-section-title">üìã ÏµúÍ∑º Í≤ΩÎ≥¥ ÎÇ¥Ïó≠ (${alarmList.length}Í∞ú)</div>
        <div class="tooltip-alarm-list">
    `;

    alarmList.forEach((alarm, index) => {
      const validClass = alarm.valid_yn === 'Y' ? 'valid-alarm' : 'invalid-alarm';

      // üî¥ Î∞úÏÉùÏùºÏãú Ï≤òÎ¶¨ Í∞úÏÑ† (null, undefined, Îπà Î¨∏ÏûêÏó¥ Î™®Îëê Ï≤òÎ¶¨)
      let timeStr = '-';
      if (alarm.occur_datetime) {
        timeStr = formatDateTimeForToolTip(alarm.occur_datetime) || '-';
      }

      const message = escapeHtml(alarm.alarm_message || 'Î©îÏãúÏßÄ ÏóÜÏùå');
      const truncatedMessage =
        message.length > 40 ? message.slice(0, TOOLTIP_CONFIG.MAX_ALARM_TEXT_LEN) + '...' : message;

      alarmHtml += `
        <div class="tooltip-alarm-item ${validClass}">
          <div class="tooltip-alarm-time">${timeStr}</div>
          <div class="tooltip-alarm-message">${truncatedMessage}</div>
        </div>
      `;
    });

    if (alarms.length > TOOLTIP_CONFIG.MAX_ALARMS_DISPLAY) {
      alarmHtml += `
        <div class="tooltip-alarm-more">
          + ${alarms.length - TOOLTIP_CONFIG.MAX_ALARMS_DISPLAY}Í∞ú Îçî ÏûàÏùå...
        </div>
      `;
    }

    alarmHtml += `
        </div>
      </div>
    `;

    return alarmHtml;
  }

  /**
   * Ï†ÑÏó≠ Ïù¥Î≤§Ìä∏ ÏÑ§Ï†ï
   */
  setupGlobalEvents() {
    // Î¨∏ÏÑú ÌÅ¥Î¶≠ Ïãú Ìà¥ÌåÅ Ïà®Í∏∞Í∏∞
    document.addEventListener('click', (event) => {
      if (!this.tooltipContainer?.contains(event.target)) {
        this.hideAll();
      }
    });

    // ESC ÌÇ§Î°ú Ìà¥ÌåÅ Ïà®Í∏∞Í∏∞
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        this.hideAll();
      }
    });

    // Ïä§ÌÅ¨Î°§ Ïãú Ìà¥ÌåÅ Ïà®Í∏∞Í∏∞
    document.addEventListener('scroll', () => {
      this.hideAll();
    });

    // ÏúàÎèÑÏö∞ Î¶¨ÏÇ¨Ïù¥Ï¶à Ïãú Ìà¥ÌåÅ Ïà®Í∏∞Í∏∞
    window.addEventListener('resize', () => {
      this.hideAll();
    });
  }

  // ================================
  // 7. Ìé∏Ïùò Î©îÏÑúÎìúÎì§ (Í∏∞Ï°¥ ÏΩîÎìú Ìò∏ÌôòÏÑ±)
  // ================================

  /**
   * Ïû•ÎπÑ Ìà¥ÌåÅ ÌëúÏãú (Ï¶âÏãú ÌëúÏãú)
   */
  showEquipmentTooltip(event, equipmentData, options = {}) {
    return this.show(TOOLTIP_TYPES.EQUIPMENT, equipmentData, event, {
      immediate: true,
      ...options,
    });
  }

  /**
   * ÎßÅÌÅ¨ Ìà¥ÌåÅ ÌëúÏãú (Ï¶âÏãú ÌëúÏãú)
   */
  showLinkTooltip(event, linkData, options = {}) {
    return this.show(TOOLTIP_TYPES.LINK, linkData, event, {
      immediate: true,
      ...options,
    });
  }

  /**
   * Íµ≠ÏÇ¨ Ìà¥ÌåÅ ÌëúÏãú
   */
  showGuksaTooltip(event, guksaData, options = {}) {
    return this.show(TOOLTIP_TYPES.GUKSA, guksaData, event, {
      immediate: true,
      ...options,
    });
  }

  /**
   * Í≤ΩÎ≥¥ Ìà¥ÌåÅ ÌëúÏãú
   */
  showAlarmTooltip(event, alarmData, options = {}) {
    return this.show(TOOLTIP_TYPES.ALARM, alarmData, event, {
      immediate: true,
      ...options,
    });
  }
}

// ================================
// 8. Ï†ÑÏó≠ Ïù∏Ïä§ÌÑ¥Ïä§ Î∞è Ìò∏ÌôòÏÑ±
// ================================

/**
 * Ïã±Í∏ÄÌÜ§ Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
 */
export const tooltipManager = new TooltipManager();
