화면 중앙에 맵에는 경보를 가질 수 있는 노드들과 링크들이 있어.
나는 이 경보들을 발생시킨 핵심 원인인 장애점, 즉 노드 또는 링크 추정을 위한 로직을 구현하려고 해.

아래 단계별 장애점 추정 로직을 반영해서 결과를 Json 문자열로 리턴해주는 코드를 만들어줘.
코드에 대한 가독성을 높이고 향후 유지보수를 쉽게 하기 위해 코드를 간단히 작성해줘.

### 로직 기본 순서: 
1. "화면 UI에서 좌측 하단 장애점 찾기 버튼 클릭" => FaultDashboardApp의 handleFaultAnalysis 함수 호출.
2. handleFaultAnalysis 함수는 FailurePointManager js 모듈를 통해 => 파이썬 infer_failure_point API를 호출.
=> 파이썬 InferFailurePoint 클래스의 인스턴스가 단계적으로 장애점 추정하고 결과를 Json으로 반환.
3. 결과 Json을 API로 전달 => FailurePointManager는 API에서 받은 Json을 파싱, 해당 장애점들을 웹 ui 맵에서 애니메이션 처리, 채팅창에 장애점 추론 결과 요약 제공.

### 각 모듈과 함수의 역할/순서:
1. handleFaultAnalysis: FailurePointManager의 함수 호출, 2가지 파라미터 전달(현재 맵에 있는 노드들과 링크들의 전체 연결 정보, 전체 경보 정보).
2. FailurePointManager: 싱글톤 모듈 생성, infer_failure_point API를 POST로 호출, 위 1번의 2가지 파라미터를 그대로 다시 전달.
3. infer_failure_point API: routes.py에 API 생성, InferFailurePoint 인스턴스를 생성하여 함수 호출 파라미터를 그대로 다시 전달
4. InferFailurePoint: 아래 단계적 로직을 실행하여 장애점 추정 노드나 링크를 json 형태로 변환, API로 반환
5. infer_failure_point API: 다시 자신을 호출한 FailurePointManager에게 InferFailurePoint에서 받은 장애점 목록 json을 전달
6. FailurePointManager: infer_failure_point API에서 받은 json을 파싱하여 장애점에 해당하는 링크와 노드를 확인하여 웹 UI에 있는 맵에서 해당 노드와 링크에를 애니매이션 처리(외곽선을 빨간색으로 두껍게와 얇게로 계속 애니메이션).

### 단계별 장애점 추정 로직(장애점은 여러 개 일 수 있음):
1. 링크 장애점 판단: 전달받은 파라미터의 링크 중에서 경보가 있는지 여부 체크하여 경보가 있으면 장애점 링크로 판단("선로 피해 발생")
2. 상위 노드 장애점 판단: 경보가 있는 노드들 중에서 자신의 하위에 있는 모든 노드가 경보가 있으면, 다시 자신의 상위노드에 경보가 있는지 확인해서 상위 노드에 경보가 없으면 자신을 장애점으로 판단하고, 만약 상위 노드에도 경보가 있으면 상위 장비에 속한 모든 하위 노드에 경보가 있는지 확인해서 모든 하위 노드에 경보가 있으면 다시 다음 상위 노드들을 추적하며 해당 노드의 하위 노드들이 모두 경보가 있는지 판단하여 최종 상위 노드 장애점을 추적("상위 노드 장애점 추정").
3. 교환 노드 장애점 판단: 교환 분야 노드인 경우
3-1: 교환 A1395 장애판단: 교환 노드들이 "A1395" 경보가 100개 이상이면, 해당 교환 노드를 장애점으로 추정(“CGW 및 CGW 연동장비 체크 필요”).
3-2: 교환 A1930 장애판단: 다른 분야의 모든 노드들에 경보가 없고, 특정 교환 노드에 "A1930" 경보가 10개 이하 존재하는 경우 해당 교환 노드를 장애점으로 추정("AGW 단독고장으로 공통부 확인 필요").
3-3: IP와 전송 분야 노드들 중 경보가 있고, 특정 교환 노드에 "A1930" 경보가 11개 이상 존재하는 경우 교환 노드와 연결된 상위의 노드들 중 경보가 있는 교환 노드를 장애점으로 추정("AGW 단독고장으로 공통부 확인 필요").
4. 전송 노드 장애점 판단: 전송 분야 노드인 경우
4.1: 전송 LOS 장애판단: 전송 노드들 중 LOS 경보가 있으면, 상위에 있는 전송 노드와 링크를 장애점으로 추정("대항국 장비 장애 또는 광선로 단선").
4.2: 전송 LOF 장애판단: 전송 노드들 중 LOF 경보가 있으면, 상위에 있는 전송 노드를 전송 장애점으로 추정("대항국 장비 불량").

### FailurePointManager의 장애점 판단 결과 리턴되는 json 포함 내용:
1. 장애점 유형(위 1~4번), 노드나 링크 ID, 노드나 링크 이름, 해당 경보내역, 장애점 추정 내역(위 1~4번 괄호 안의 내용).
2. 장애점 전체 요약 정보: 총 장애점 0개, 노드 0개, 링크 0개, 장애 유형별 0개 인지 알 수 있도록 포함.



1. 맵의 노드들 중 장애점 추정 상위 노드를 계속 추적 (알고리즘 적용)
- (로직) TblAlarmAllLast에 특정 노드의 모든 하위 노드들의 경보가 존재하면 => 다시 특정 노드의 모든 상위 노드들을 찾아 경보 여부를 확인하고,
=> 다시 해당 상위 노드에 연결된 모든 하위 노드들을 찾아 모두 경보인지를 확인하며,
=> 계속 상위 노드들의 하위 노드 전체 경보 여부를 판단하여 최종 장애 상위 노드를 찾음.
- (예시) down node#1, #2, #3 모두 경보 –-- up node#1, #2 모두 경보 --- up node #3만 경보, up node #4는 경보 없음 => 장애점 찾기를 중단하고 상위 노드 up node #3을 장애점으로 추정
- (Json 형식) “up_equip_fault_point”: [{“equip_id”: “aaa”, “equip_name”:”aaa”}, {“equip_id”: “aaa”, “equip_name”:”aaa”}, {“equip_id”: “aaa”, “equip_name”:”aaa”}, ...]


2. 맵의 링크들 중 선로 경보 여부 확인
- (로직) TblAlarmAllLast의 sector가 ‘선로’ 분야인 경보가 있는지 확인
- (json 형식) “link_fault_point”: [{“equip_id”: “aaa”, “equip_name”:”aaa”}, {“equip_id”: “aaa”, “equip_name”:”aaa”}, {“equip_id”: “aaa”, “equip_name”:”aaa”}, ...] 

3. 현재 맵의 링크 중 선로 경보 여부 확인
- (로직) TblAlarmAllLast의 sector가 ‘선로’ 분야인 경보가 있는지 확인 


전송분야 Rule base
----------------------------------
ㅇ LOS 경보 : 광신호 혹은 전기적 신호가 손실되어 입력 신호가 없는 것으로, 근원적인 장애점은 99%의 확률로 대항국 장비나 광선로 단선으로 발생이 되며, 1%의 확률로 경보가 발생된 장치의 유니트나 광모듈 불량에 의해 발생됨.

ㅇ LOF 경보 : 광신호 혹은 전기적 신호가 손실되어 입력 프레임이 없는 것으로, 근원적인 장애점은 99%의 확률로 대항국 장비의 불량으로 발생이 되며, 1%의 확률로 경보가 발생된 장치의 유니트나 광모듈 불량에 의해 발생됨.

ㅇ AIS 경보 : LOS 경보, LOF 경보 발생시에 신호 진행방향으로 발생되는 경보로서 해당 경보는 무효 경보임.

 
교환 분야 Rule
----------------------------------
가. A1935
ㅇ default는 무효경보로 처리하고 Detector가 수집하는 알람기준 A1935가 100개 이상 발생해야 만 유효경보로 처리
유효경보 처리 시 장애점 멘트 : “CGW 및 CGW연동장비 체크 필요”
 
나. A1930
ㅇ 수집된 알람이 A1930 1개 발생 시 IP, 전송장비에서 알람이 발생하지 않았으면
장애점 멘트 : “AGW 단독고장으로 공통부 확인필요”

ㅇ 수집된 알람에서 A1930이 다량 발생일 경우, IP/전송장비에서 알람이 발생한경우
장애점 멘트 : “ ㅇㅇㅇ시스템 이상여부 체크 필요”
ㅇㅇㅇ 시스템은 링크정보(엑셀)에서 맵핑되는 상위장비